name: CI Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: read

jobs:
  # STAGE 1: Quick Validation (~30s total)
  quick-checks:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-lint.txt
    
    - name: Run ruff
      run: ruff check src tests
    
    - name: Check formatting with black
      run: black --check src tests
    
    - name: Check import sorting with isort
      run: isort --check-only src tests
    
    - name: Run type checking with mypy
      run: mypy src

  # STAGE 2: Core Tests (~30s - FAIL FAST)
  core-tests:
    name: Core Functionality Tests
    needs: quick-checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-core-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-core-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
    
    - name: Run Core Tests
      run: |
        pytest tests/_core -v -x --tb=short -m "not slow"
        # Exit immediately if core tests fail
    
    - name: Upload core test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: core-test-results
        path: pytest-results.xml

  # STAGE 3: Resilience Tests (~45s)
  resilience-tests:
    name: Error Handling & Resilience Tests
    needs: core-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
    
    - name: Run Resilience Tests
      run: |
        pytest tests/_resilience -v -x --cov=src/async_cassandra --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: github.event_name == 'push'
      with:
        file: ./coverage.xml
        flags: resilience
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # STAGE 4: Feature & Integration Tests (Parallel - ~2m)
  feature-tests:
    name: Advanced Features Tests
    needs: resilience-tests
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
    
    - name: Run Feature Tests
      run: |
        pytest tests/_features -v --cov=src/async_cassandra --cov-report=xml
    
    - name: Upload coverage
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: features
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  integration-tests:
    name: Cassandra Integration Tests
    needs: resilience-tests
    runs-on: ubuntu-latest
    services:
      cassandra:
        image: cassandra:5.0
        ports:
          - 9042:9042
        options: >-
          --health-cmd "cqlsh -e 'describe cluster'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
    
    - name: Wait for Cassandra
      run: |
        for i in {1..30}; do
          if docker exec ${{ job.services.cassandra.id }} cqlsh -e "describe cluster" 2>/dev/null; then
            echo "Cassandra is ready"
            break
          fi
          echo "Waiting for Cassandra... ($i/30)"
          sleep 10
        done
    
    - name: Run Integration Tests
      run: |
        pytest tests/integration -v --timeout=300
      env:
        CASSANDRA_HOST: localhost
        CASSANDRA_PORT: 9042

  # STAGE 5: Critical Path Tests (Parallel - ~2m)
  fastapi-tests:
    name: FastAPI Integration (CRITICAL)
    needs: resilience-tests
    runs-on: ubuntu-latest
    services:
      cassandra:
        image: cassandra:5.0
        ports:
          - 9042:9042
        options: >-
          --health-cmd "cqlsh -e 'describe cluster'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
        pip install -r examples/fastapi_app/requirements-ci.txt
    
    - name: Wait for Cassandra
      run: |
        timeout 300 bash -c 'until docker exec ${{ job.services.cassandra.id }} cqlsh -e "describe cluster" 2>/dev/null; do sleep 5; done'
    
    - name: Run FastAPI Tests
      run: |
        pytest tests/fastapi -v
        cd examples/fastapi_app && pytest tests/ -v

  bdd-tests:
    name: BDD Acceptance Tests
    needs: resilience-tests
    runs-on: ubuntu-latest
    services:
      cassandra:
        image: cassandra:5.0
        ports:
          - 9042:9042
        options: >-
          --health-cmd "cqlsh -e 'describe cluster'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
    
    - name: Wait for Cassandra
      run: |
        timeout 300 bash -c 'until docker exec ${{ job.services.cassandra.id }} cqlsh -e "describe cluster" 2>/dev/null; do sleep 5; done'
    
    - name: Run BDD Critical Scenarios
      run: |
        pytest tests/bdd -m "critical" -v --tb=short
    
    - name: Generate BDD Report
      if: always()
      run: |
        pytest tests/bdd -m "critical" --cucumber-json=reports/bdd.json || true
    
    - name: Upload BDD Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: bdd-reports
        path: reports/

  # STAGE 6: Extended Tests (On main branch only)
  performance-tests:
    name: Performance & Stress Tests
    needs: [fastapi-tests, bdd-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    services:
      cassandra:
        image: cassandra:5.0
        ports:
          - 9042:9042
        options: >-
          --health-cmd "cqlsh -e 'describe cluster'"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[test]"
    
    - name: Wait for Cassandra
      run: |
        timeout 300 bash -c 'until docker exec ${{ job.services.cassandra.id }} cqlsh -e "describe cluster" 2>/dev/null; do sleep 5; done'
    
    - name: Run Performance Tests
      run: |
        pytest tests/performance -v --benchmark-only
      env:
        CASSANDRA_HOST: localhost

  # Final build job
  build:
    name: Build Distribution
    needs: [core-tests, resilience-tests, feature-tests, integration-tests, fastapi-tests, bdd-tests]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build distribution
      run: python -m build
    
    - name: Check distribution
      run: twine check dist/*
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # Security scan (only on push)
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4
    
    - name: Run bandit security linter
      run: |
        pip install bandit[toml]
        bandit -r src/ -ll -i -x tests
    
    - name: Run safety check
      run: |
        pip install safety
        pip install -e .
        safety check --json --continue-on-error